<div class=" bg-white mx-5 rounded p-5">
    <h3 class="mb-3">@Accion Empleado @empleado.Nombre</h3>
    <br />
    <form>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Nombre Comercial</label>
                <input type="text" class="form-control" @bind="empleado.Nombre">
            </div>
            <div class="form-group col-md-6">
                <label>Razon Social</label>
                <input type="text" class="form-control" @bind="empleado.Apellidos">
            </div>
        </div>

        <label>Rfc</label>
        <input type="text" class="form-control" @bind="empleado.Rfc" />
        <label>Direccion</label>
        <input type="text" class="form-control" @bind="empleado.Direccion" />
        <label>Telefono</label>
        <input type="text" class="form-control" @bind="empleado.Telefono" />
        <label>Correo</label>
        <input type="text" class="form-control mb-2" @bind="empleado.Correo" />

        <div class="mb-4 border"></div>
        @if (Accion == "Agregar")
        {<button type="button" class="btn btn-primary float-right" @onclick="agregarEmpleado">Agregar Empleado</button> }
        else
        {<button type="button" class="btn btn-primary float-right" @onclick="actualizarEmpleado">Actualizar Empleado</button>}

    </form>

    @if (code == 201)
    {<p class="text-success">Agregado!</p>}
    @if (code == 404)
    {<p class="text-danger">Error al agregar :(</p>}

</div>

@code {
    [Inject]
    private SIIC.ProyectoBlazor.LuisGerardo.BL.EmpleadosBL EmpleadosBL { get; set; }
    [Parameter]
    public SIIC.ProyectoBlazor.LuisGerardo.APIClient.Models.EmpleadosModel empleado { get; set; } = new APIClient.Models.EmpleadosModel();
    [Parameter]
    public int code { get; set; }
    [Parameter]
    public String Accion { get; set; }

    public async Task agregarEmpleado()
    {
        var res = await EmpleadosBL.AgregarEmpleadosAsync(empleado);
        if (res)
        {
            code = 201;
        }
        else { code = 404; }
        empleado = new APIClient.Models.EmpleadosModel();
        // Si la API devolviera HttpResponse seria mas facil implementar validaciones en funcion del codigo de respuesta.
    }
    public async Task actualizarEmpleado()
    {
        var res = await EmpleadosBL.ActualizarEmpleadosAsync(empleado);
        if (res)
        {
            code = 201;
        }
        else { code = 404; }
        // Si la API devolviera HttpResponse seria mas facil implementar validaciones en funcion del codigo de respuesta.
    }

}
